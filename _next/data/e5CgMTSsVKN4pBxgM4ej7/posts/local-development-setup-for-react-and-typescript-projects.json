{"pageProps":{"postData":{"id":"local-development-setup-for-react-and-typescript-projects","contentHtml":"<h2>Introduction</h2>\n<p>This is a guide on how to setup a local development for <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">React</a> and <a href=\"https://www.typescriptlang.org/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">TypeScript</a> projects. This also involves extensions and libraries that helps us save time and energy when writing our code.</p>\n<h2>Prerequisites</h2>\n<p>By the way, upon writing this post, I assume that you have some web development background and basic knowledge regarding <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">npm</a>, <a href=\"https://classic.yarnpkg.com/lang/en/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">yarn</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">HTML</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">CSS</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">JavaScript</a> and <a href=\"https://reactjs.org/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">React</a>.</p>\n<p>Some prerequisites below. Make sure to install them in your system if you haven't!</p>\n<ul>\n<li><a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Visual Studio Code</a></li>\n<li><a href=\"https://classic.yarnpkg.com/lang/en/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Yarn</a></li>\n</ul>\n<p>We'll be using <a href=\"https://code.visualstudio.com/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Visual Studio Code</a> as our <a href=\"https://en.wikipedia.org/wiki/Integrated_development_environment\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">IDE</a> in this tutorial as we will utilize a few extensions from their <a href=\"https://marketplace.visualstudio.com/vscode\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">marketplace</a>. And we'll use <a href=\"https://classic.yarnpkg.com/lang/en/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Yarn</a> as our package manager, it's just like <a href=\"https://www.npmjs.com/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">npm</a> but <em>faster</em>.</p>\n<h2>Initialize your project</h2>\n<p>Fastest way to get started with React is using <a href=\"https://create-react-app.dev/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Create React App</a>. It is an officially supported way to create single-page React applications. It offers a modern build setup with no configuration so you can focus on code, not build tools.</p>\n<p>To create our project with React and TypeScript, run this command in your terminal:</p>\n<pre><code>yarn create react-app my-app --template typescript\n</code></pre>\n<p>Open the created project in your Visual Studio Code. Then open the terminal in Visual Studio Code. The keyboard shortcut would be <code> Ctrl</code> + <code>`</code>.</p>\n<p>Then, let's run our project to see if everything is working fine:</p>\n<pre><code>yarn start\n</code></pre>\n<p>This command will open your default browser and go to <code>http://localhost:3000/</code>. If it doesn't, you can do it yourself too. The page should show something like this:</p>\n<p><img src=\"/images/posts/local-development-setup-for-react-and-typescript-projects/create-react-app-default-page.png\" alt=\"Screenshot of Create React App default page\"></p>\n<p>This setup comes with live-editing or hot reloading which means when we save file changes, it will automatically update the app and reload on the browser. That's great for local development!</p>\n<h2>Install ES7 React Snippets extension in Visual Studio Code</h2>\n<p>Next, let's install <a href=\"https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">ES7 React Snippets</a>. You can think of it like a shortcut that helps you create the basic structure of a component in React, for example I want to create a functional component, I have to write the code to import React first, then write the function component then lastly write the code to export it. With this extension, I can achieve the same by typing <code>rfce</code> and it will show a suggestion for <code>reactFunctionalComponentExport</code> and I just have to press enter and it will write the code for us. This saves us time and energy when writing components.</p>\n<p>Click on the \"Extensions\" tab and look for \"ES7 React\" and install it. You can also install it via this <a href=\"https://marketplace.visualstudio.com/items?itemName=dsznajder.es7-react-js-snippets\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">link</a>.</p>\n<p><img src=\"/images/posts/local-development-setup-for-react-and-typescript-projects/install-es7-react-snippets-extension-in-visual-studio-code.png\" alt=\"Screenshot of how to install ES7 React Snippets extension in Visual Studio Code\"></p>\n<h2>Install Prettier extension in Visual Studio Code</h2>\n<p>Then, let's install <a href=\"https://prettier.io/\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">Prettier</a>, it's a code formatter that formats the code for us when we save file changes which is another time-saver.</p>\n<p>Click on the \"Extensions\" tab and look for \"Prettier\" and install it. You can also install it via this <a href=\"https://marketplace.visualstudio.com/items?itemName=esbenp.prettier-vscode\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">link</a>.</p>\n<p><img src=\"/images/posts/local-development-setup-for-react-and-typescript-projects/install-prettier-extension-in-visual-studio-code.png\" alt=\"Screenshot of how to install Prettier extension in Visual Studio Code\"></p>\n<p>After Prettier is installed, we still need to enable the formatting feature by updating our settings in Visual Studio Code. Let's create a folder in the root directory and name it <code>.vscode</code>. Then, create a file inside it and name it <code>settings.json</code>. Then update the created file with the code below:</p>\n<pre><code>{\n  \"editor.formatOnSave\": true,\n  \"editor.defaultFormatter\": \"esbenp.prettier-vscode\",\n  \"editor.tabSize\": 2\n}\n</code></pre>\n<p>Feel free to modify <code>editor.tabSize</code> as that can be changed according to your preference.</p>\n<p>Next, create another file in the root directory and name it <code>.prettierrc</code>. Update the created file and add the code below:</p>\n<pre><code>{\n  \"singleQuote\": true,\n  \"trailingComma\": \"es5\",\n  \"arrowParens\": \"always\",\n  \"tabWidth\": 2\n}\n</code></pre>\n<p>This will be the config for Prettier to follow when formatting the code. These configs can be updated according to your preference.</p>\n<p>Alright, once the changes are done. That should make our Prettier work.</p>\n<h2>Generating random data for tests</h2>\n<p>Lastly, let's install a library called <a href=\"https://github.com/Marak/faker.js\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">faker</a> which gives us random data when we write tests. Why do we want random data? It makes our tests more reliable as opposed to hardcoding the data we use in testing. Run the command below on your terminal to install it along with its type:</p>\n<pre><code>yarn add -D faker @types/faker\n</code></pre>\n<p>Since our project uses TypeScript, when installing libraries, we would have to install their types as well, because if not TypeScript would display an error that it couldn't find the library's type declarations.</p>\n<p>To use faker in a test case, it would be like this:</p>\n<pre><code>import faker from 'faker';\n...\nit('should render the title', () => {\n  const title = faker.lorem.sentence();\n\n  render(&#x3C;MyComponent title={title} />);\n\n  const titleEl = screen.queryByText(title);\n\n  expect(titleEl).toBeInTheDocument();\n});\n</code></pre>\n<p>You can checkout their API <a href=\"https://github.com/marak/faker.js#api\" target=\"_blank\" rel=\"noopener noreferrer nofollow\">here</a> to know all the other data it can randomly generate.</p>\n<p>And that's all you need. So you can now go ahead and start coding! For your info, I write posts about how to build your own components in React and TypeScript with tests so do check them out if you're interested!</p>\n","previousPost":{"id":"building-an-email-template-with-mjml-framework","title":"Building an email template with MJML framework","date":"2021-09-16","excerpt":"Learn how to build a responsive email template in a less painful way","category":"technology","videoUrl":"https://youtu.be/9uQtftjQwmI"},"nextPost":{"id":"how-to-create-your-own-accordion-in-react-and-typescript-with-tests","title":"How to create your own accordion in React and TypeScript with tests","date":"2021-09-26","excerpt":"Learn how to build a collapsible content in a reactive and reusable way","category":"technology","videoUrl":"https://youtu.be/Hn7iDjbPtVY"},"title":"Local development setup for React and TypeScript projects","date":"2021-09-26","excerpt":"A quick way to get started with React and TypeScript","category":"technology","videoUrl":""}},"__N_SSG":true}